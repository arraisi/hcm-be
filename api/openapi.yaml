openapi: 3.1.0
info:
  title: HCM Backend API
  description: Human Capital Management Backend API with user management and webhook endpoints
  version: 0.1.0
  contact:
    name: HCM API Support
    email: support@hcm.com

servers:
  - url: http://localhost:8080
    description: Development server

security:
  - ApiKeyAuth: []

paths:
  # Health Check Endpoints
  /healthz:
    get:
      summary: Liveness check
      description: Returns the service health status
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'

  /readyz:
    get:
      summary: Readiness check
      description: Returns the service readiness status
      tags: [Health]
      security: []
      responses:
        '200':
          description: Service is ready
          content:
            text/plain:
              schema:
                type: string
                example: 'OK'

  # User Management Endpoints
  /api/v1/users:
    get:
      summary: List users
      description: Retrieve a paginated list of users with optional search and sorting
      tags: [Users]
      parameters:
        - name: limit
          in: query
          description: Maximum number of users to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: offset
          in: query
          description: Number of users to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: search
          in: query
          description: Search term to filter users by name or email
          schema:
            type: string
        - name: sort_by
          in: query
          description: Field to sort by
          schema:
            type: string
            enum: [name, email, created_at]
        - name: order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create user
      description: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update user
      description: Update an existing user
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete user
      description: Delete a user by their ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Webhook Endpoints
  /api/v1/webhook/test-drive-booking:
    post:
      summary: Test Drive Booking Webhook
      description: Webhook endpoint for receiving test drive booking events
      tags: [Webhooks]
      security:
        - WebhookAuth: []
      parameters:
        - name: X-API-Key
          in: header
          required: true
          description: API key for webhook authentication
          schema:
            type: string
        - name: X-Signature
          in: header
          required: true
          description: HMAC signature for request verification
          schema:
            type: string
            pattern: '^[a-fA-F0-9]{64}$'
        - name: X-Event-Id
          in: header
          required: true
          description: Unique event identifier (UUID v4)
          schema:
            type: string
            format: uuid
        - name: X-Event-Timestamp
          in: header
          required: true
          description: Unix timestamp of the event
          schema:
            type: string
            pattern: '^[0-9]+$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingEvent'
      responses:
        '202':
          description: Webhook event accepted and processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for general authentication

    WebhookAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for webhook authentication

  schemas:
    # Success Response Schema
    SuccessResponse:
      type: object
      required: [data, message]
      properties:
        data:
          type: object
          nullable: true
        message:
          type: string
        meta:
          type: object
          nullable: true

    # User Schemas
    User:
      type: object
      required: [id, email, name, created_at]
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User full name
        created_at:
          type: string
          format: date-time
          description: User creation timestamp

    CreateUserRequest:
      type: object
      required: [email, name]
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: 'john.doe@example.com'
        name:
          type: string
          description: User full name
          example: 'John Doe'

    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: 'john.doe@example.com'
        name:
          type: string
          description: User full name
          example: 'John Doe'

    UserResponse:
      type: object
      required: [data, message]
      properties:
        data:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: 'User retrieved successfully'

    UsersListResponse:
      type: object
      required: [data, message]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        message:
          type: string
          example: 'Users retrieved successfully'
        meta:
          type: object
          properties:
            pagination:
              type: object
              properties:
                limit:
                  type: integer
                offset:
                  type: integer

    # Webhook Schemas
    BookingEvent:
      type: object
      required: [eventId, data]
      properties:
        eventId:
          type: string
          format: uuid
          description: Unique event identifier
        data:
          $ref: '#/components/schemas/BookingData'

    BookingData:
      type: object
      required: [oneAccount, testDrive, leads]
      properties:
        oneAccount:
          $ref: '#/components/schemas/OneAccount'
        testDrive:
          $ref: '#/components/schemas/TestDrive'
        leads:
          $ref: '#/components/schemas/Leads'

    OneAccount:
      type: object
      required: [one_account_ID, first_name, last_name, gender, phone_number]
      properties:
        one_account_ID:
          type: string
          description: One account identifier
        first_name:
          type: string
          description: Customer first name
        last_name:
          type: string
          description: Customer last name
        gender:
          type: string
          enum: [MALE, FEMALE]
          description: Customer gender
        phone_number:
          type: string
          description: Customer phone number
        email:
          type: string
          format: email
          description: Customer email address

    TestDrive:
      type: object
      required: [test_drive_ID, test_drive_number, katashiki_code, model, variant, created_datetime, test_drive_datetime_start, test_drive_datetime_end, location, outlet_ID, outlet_name, test_drive_status, customer_driving_consent]
      properties:
        test_drive_ID:
          type: string
          description: Test drive identifier
        test_drive_number:
          type: string
          description: Test drive booking number
        katashiki_code:
          type: string
          description: Vehicle katashiki code
        model:
          type: string
          description: Vehicle model
        variant:
          type: string
          description: Vehicle variant
        created_datetime:
          type: integer
          format: int64
          description: Creation timestamp (Unix)
        test_drive_datetime_start:
          type: integer
          format: int64
          description: Test drive start timestamp (Unix)
        test_drive_datetime_end:
          type: integer
          format: int64
          description: Test drive end timestamp (Unix)
        location:
          type: string
          description: Test drive location
        outlet_ID:
          type: string
          description: Outlet identifier
        outlet_name:
          type: string
          description: Outlet name
        test_drive_status:
          type: string
          enum: [SUBMITTED, CHANGE_REQUEST, CANCEL_SUBMITTED]
          description: Test drive status
        cancellation_reason:
          type: string
          nullable: true
          description: Cancellation reason
        other_cancellation_reason:
          type: string
          nullable: true
          description: Other cancellation reason
        customer_driving_consent:
          type: boolean
          description: Customer driving consent

    Leads:
      type: object
      required: [leads_ID, leads_type, leads_follow_up_status, leads_preference_contact_time_start, leads_preference_contact_time_end, leads_source]
      properties:
        leads_ID:
          type: string
          description: Leads identifier
        leads_type:
          type: string
          enum: [TEST_DRIVE_REQUEST]
          description: Type of lead
        leads_follow_up_status:
          type: string
          description: Follow-up status
        leads_preference_contact_time_start:
          type: string
          description: Preferred contact time start
        leads_preference_contact_time_end:
          type: string
          description: Preferred contact time end
        leads_source:
          type: string
          description: Lead source
        additional_notes:
          type: string
          nullable: true
          description: Additional notes

    WebhookResponse:
      type: object
      required: [data, message]
      properties:
        data:
          type: object
          required: [eventId, status]
          properties:
            eventId:
              type: string
              format: uuid
              description: Event identifier
            status:
              type: string
              enum: [RECEIVED]
              description: Processing status
        message:
          type: string
          enum: [accepted]
          description: Response message

    # Error Response Schemas
    ErrorResponse:
      type: object
      required: [data, message]
      properties:
        data:
          type: object
          nullable: true
        message:
          type: string
          description: Error message
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
            details:
              type: object
              nullable: true
              description: Additional error details

    ValidationErrorResponse:
      type: object
      required: [data, message]
      properties:
        data:
          type: array
          items:
            type: object
            required: [field, message]
            properties:
              field:
                type: string
                description: Field name that failed validation
              message:
                type: string
                description: Validation error message
              value:
                type: string
                description: Invalid value
        message:
          type: string
          example: 'Validation failed'

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            data: null
            message: 'Invalid request'
            error:
              code: 'BAD_REQUEST'

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            data: null
            message: 'Invalid API key'
            error:
              code: 'UNAUTHORIZED'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            data: null
            message: 'User not found'
            error:
              code: 'NOT_FOUND'

    Conflict:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            data: null
            message: 'User already exists'
            error:
              code: 'CONFLICT'

    ValidationError:
      description: Validation error - invalid input format
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
          example:
            data:
              - field: 'email'
                message: 'email is required'
                value: ''
              - field: 'name'
                message: 'name must be at least 2 characters long'
                value: 'a'
            message: 'Validation failed'

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            data: null
            message: 'Internal server error'
            error:
              code: 'INTERNAL_ERROR'

tags:
  - name: Health
    description: Health check endpoints
  - name: Users
    description: User management operations
  - name: Webhooks
    description: Webhook endpoints for external integrations
