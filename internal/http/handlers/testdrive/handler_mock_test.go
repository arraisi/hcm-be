// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package testdrive is a generated GoMock package.
package testdrive

import (
	context "context"
	reflect "reflect"

	testdrive "github.com/arraisi/hcm-be/internal/domain/dto/testdrive"
	gomock "github.com/golang/mock/gomock"
)

// MockIdempotencyService is a mock of IdempotencyService interface.
type MockIdempotencyService struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyServiceMockRecorder
}

// MockIdempotencyServiceMockRecorder is the mock recorder for MockIdempotencyService.
type MockIdempotencyServiceMockRecorder struct {
	mock *MockIdempotencyService
}

// NewMockIdempotencyService creates a new mock instance.
func NewMockIdempotencyService(ctrl *gomock.Controller) *MockIdempotencyService {
	mock := &MockIdempotencyService{ctrl: ctrl}
	mock.recorder = &MockIdempotencyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyService) EXPECT() *MockIdempotencyServiceMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIdempotencyService) Exists(eventID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", eventID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockIdempotencyServiceMockRecorder) Exists(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIdempotencyService)(nil).Exists), eventID)
}

// Store mocks base method.
func (m *MockIdempotencyService) Store(eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockIdempotencyServiceMockRecorder) Store(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockIdempotencyService)(nil).Store), eventID)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ConfirmTestDriveBooking mocks base method.
func (m *MockService) ConfirmTestDriveBooking(ctx context.Context, request testdrive.ConfirmTestDriveBookingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmTestDriveBooking", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmTestDriveBooking indicates an expected call of ConfirmTestDriveBooking.
func (mr *MockServiceMockRecorder) ConfirmTestDriveBooking(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmTestDriveBooking", reflect.TypeOf((*MockService)(nil).ConfirmTestDriveBooking), ctx, request)
}

// RequestTestDriveBooking mocks base method.
func (m *MockService) RequestTestDriveBooking(ctx context.Context, request testdrive.TestDriveEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTestDriveBooking", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestTestDriveBooking indicates an expected call of RequestTestDriveBooking.
func (mr *MockServiceMockRecorder) RequestTestDriveBooking(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTestDriveBooking", reflect.TypeOf((*MockService)(nil).RequestTestDriveBooking), ctx, request)
}
