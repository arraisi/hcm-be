// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package webhook is a generated GoMock package.
package webhook

import (
	context "context"
	reflect "reflect"

	servicebooking "github.com/arraisi/hcm-be/internal/domain/dto/servicebooking"
	testdrive "github.com/arraisi/hcm-be/internal/domain/dto/testdrive"
	gomock "github.com/golang/mock/gomock"
)

// MockTestDriveService is a mock of TestDriveService interface.
type MockTestDriveService struct {
	ctrl     *gomock.Controller
	recorder *MockTestDriveServiceMockRecorder
}

// MockTestDriveServiceMockRecorder is the mock recorder for MockTestDriveService.
type MockTestDriveServiceMockRecorder struct {
	mock *MockTestDriveService
}

// NewMockTestDriveService creates a new mock instance.
func NewMockTestDriveService(ctrl *gomock.Controller) *MockTestDriveService {
	mock := &MockTestDriveService{ctrl: ctrl}
	mock.recorder = &MockTestDriveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestDriveService) EXPECT() *MockTestDriveServiceMockRecorder {
	return m.recorder
}

// RequestTestDriveBooking mocks base method.
func (m *MockTestDriveService) RequestTestDriveBooking(ctx context.Context, request testdrive.TestDriveEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestTestDriveBooking", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestTestDriveBooking indicates an expected call of RequestTestDriveBooking.
func (mr *MockTestDriveServiceMockRecorder) RequestTestDriveBooking(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTestDriveBooking", reflect.TypeOf((*MockTestDriveService)(nil).RequestTestDriveBooking), ctx, request)
}

// MockServiceBookingService is a mock of ServiceBookingService interface.
type MockServiceBookingService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceBookingServiceMockRecorder
}

// MockServiceBookingServiceMockRecorder is the mock recorder for MockServiceBookingService.
type MockServiceBookingServiceMockRecorder struct {
	mock *MockServiceBookingService
}

// NewMockServiceBookingService creates a new mock instance.
func NewMockServiceBookingService(ctrl *gomock.Controller) *MockServiceBookingService {
	mock := &MockServiceBookingService{ctrl: ctrl}
	mock.recorder = &MockServiceBookingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceBookingService) EXPECT() *MockServiceBookingServiceMockRecorder {
	return m.recorder
}

// RequestServiceBooking mocks base method.
func (m *MockServiceBookingService) RequestServiceBooking(ctx context.Context, request servicebooking.ServiceBookingEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestServiceBooking", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestServiceBooking indicates an expected call of RequestServiceBooking.
func (mr *MockServiceBookingServiceMockRecorder) RequestServiceBooking(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestServiceBooking", reflect.TypeOf((*MockServiceBookingService)(nil).RequestServiceBooking), ctx, request)
}

// MockIdempotencyStore is a mock of IdempotencyStore interface.
type MockIdempotencyStore struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyStoreMockRecorder
}

// MockIdempotencyStoreMockRecorder is the mock recorder for MockIdempotencyStore.
type MockIdempotencyStoreMockRecorder struct {
	mock *MockIdempotencyStore
}

// NewMockIdempotencyStore creates a new mock instance.
func NewMockIdempotencyStore(ctrl *gomock.Controller) *MockIdempotencyStore {
	mock := &MockIdempotencyStore{ctrl: ctrl}
	mock.recorder = &MockIdempotencyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyStore) EXPECT() *MockIdempotencyStoreMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIdempotencyStore) Exists(eventID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", eventID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockIdempotencyStoreMockRecorder) Exists(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIdempotencyStore)(nil).Exists), eventID)
}

// Store mocks base method.
func (m *MockIdempotencyStore) Store(eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockIdempotencyStoreMockRecorder) Store(eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockIdempotencyStore)(nil).Store), eventID)
}
